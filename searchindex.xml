<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>k8s中grpc负载不均衡的问题</title><url>/post/grpc-http2/</url><categories/><tags><tag>gRPC</tag><tag>HTTP2</tag><tag>k8s</tag></tags><content type="html">
1. gRPC gRPC是由google开发的，是一款语言中立、平台中立、开源的RPC(Remote Procedure Call，远程过程调用)框架。
在gRPC里客户端应用可以像调用本地对象一样直接调用另一台不同的机器上服务端应用的方法，使得您能够更容易地创建分布式应用和服务。与许多 RPC框架类似，gRPC也是基于以下理念：定义一个服务，指定其能够被远程调用的方法（包含参数和返回类型）。在服务端实现这个接口，并运行一个 gRPC 服务器来处理客户端调用。 特性 基于HTTP/2 HTTP/2 提供了连接多路复用、双向流、服务器推送、请求优先级、首部压缩等机制。可以节省带宽、降低TCP链接次数、节省CPU，帮助移动设备延长电池寿命等。gRPC 的协议设计上使用了HTTP2 现有的语义，请求和响应的数据使用HTTP Body 发送，其他的控制信息则用Header 表示。
IDL使用ProtoBuf gRPC使用ProtoBuf来定义服务，ProtoBuf是由Google开发的一种数据序列化协议（类似于XML、JSON、hessian）。ProtoBuf能够将数据进行序列化，并广泛应用在数据存储、通信协议等方面。压缩和传输效率高，语法简单，表达力强。
多语言支持 gRPC支持多种语言，并能够基于语言自动生成客户端和服务端功能库。目前已提供了C版本grpc、Java版本grpc-java 和 Go版本grpc-go，其它语言的版本正在积极开发中，其中，grpc支持C、C++、Node.js、Python、Ruby、Objective-C、PHP和C#等语言，grpc-java已经支持Android开发。
2. HTTP2.0 HTTP/2，也就是超文本传输协议第2版，不论是1还是2，HTTP的基本语义是不变的，比如方法语义（GET/PUST/PUT/DELETE），状态码（200/404/500等），Range Request，Cacheing，Authentication、URL路径， 不同的主要是下面几点：
多路复用 在 HTTP/1.1 协议中 「浏览器客户端在同一时间，针对同一域名下的请求有一定数量限制。超过限制数目的请求会被阻塞」。 HTTP/2 的多路复用(Multiplexing) 则允许同时通过单一的 HTTP/2 连接发起多重的请求-响应消息。
因此 HTTP/2 可以很容易的去实现多流并行而不用依赖建立多个 TCP 连接，HTTP/2 把 HTTP 协议通信的基本单位缩小为一个一个的帧，这些帧对应着逻辑流中的消息。并行地在同一个 TCP 连接上双向交换消息。 二进制帧 HTTP/2 传输的数据是二进制的。相比 HTTP/1.1 的纯文本数据，二进制数据一个显而易见的好处是：更小的传输体积。这就意味着更低的负载。二进制的帧也更易于解析而且不易出错，纯文本帧在解析的时候还要考虑处理空格、大小写、空行和换行等问题，而二进制帧就不存在这个问题。
头部压缩 HTTP是无状态协议。简而言之，这意味着每个请求必须要携带服务器需要的所有细节，而不是让服务器保存住之前请求的元数据。因为http2没有改变这个范式，所以它也需要这样（携带所有细节），因此 HTTP 请求的头部需要包含用于标识身份的数据比如 cookies，而这些数据的量也在随着时间增长。每一个请求的头部都包含这些大量的重复数据，无疑是一种很大的负担。对请求头部进行压缩，将会大大减轻这种负担，尤其对移动端来说，性能提高非常明显。
HTTP/2 使用的压缩方式是 HPACK。
HTTP2.0在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键-值对，对于相同的数据，不再通过每次请求和响应发送；通信期间几乎不会改变的通用键-值对（用户代理、可接受的媒体类型，等等）只需发送一次。
事实上,如果请求中不包含首部（例如对同一资源的轮询请求），那么首部开销就是零字节。此时所有首部都自动使用之前请求发送的首部。
如果首部发生变化了，那么只需要发送变化了数据在Headers帧里面，新增或修改的首部帧会被追加到“首部表”。首部表在 HTTP2.0的连接存续期内始终存在,由客户端和服务器共同渐进地更新。
添加请求优先级 为了方便流的传输顺序，每个流都有权重和依赖。每个流的权重值在1~256之间，每个流可以详细给出对其他流的依赖。权重和依赖的结合可以使客户端构建出优先级二叉树的形式，来表达出更想依次得到哪些响应，然后服务端可以按权重分配硬件资源。
服务器推送 服务端可以为每个客户端请求发送多个响应，也就是说，除了原始的响应，服务端还可以给客户端发送额外的资源。服务器推送的资源可以由客户端缓存，推送的资源可以在不同的页面上重复使用，推送的资源可以与其他资源一起复用，推送的资源可以由服务器决定优先级，推送的资源也可以被客户端拒绝。
3. 长连接与短连接 HTTP的长连接和短连接本质上是TCP长连接和短连接。HTTP属于应用层协议，在传输层使用TCP协议，在网络层使用IP协议。 IP协议主要解决网络路由和寻址问题，TCP协议主要解决如何在IP层之上可靠地传递数据包，使得网络上接收端收到发送端所发出的所有包，并且顺序与发送顺序一致。TCP协议是可靠的、面向连接的。
短连接 HTTP1.0默认是短连接：也就是说每次与服务器交互，都需要新开一个连接。 连接->传输数据->关闭连接 比如HTTP是无状态的的短链接，浏览器和服务器每进行一次HTTP操作，就建立一次连接，但任务结束就中断连接。 因为连接后接收了数据就断开了，所以每次数据接受处理不会有联系。 这也是HTTP协议无状态的原因之一。
长连接 连接->传输数据->保持连接 -> 传输数据-> …->直到一方关闭连接，多是客户端关闭连接。 长连接指建立SOCKET连接后不管是否使用都保持连接，但安全性较差。
在HTTP1.1中默认就使用持久化连接来解决：建立一次连接，多次请求均由这个连接完成。 HTTP2所有性能增强的核心在于新的二进制分帧层(不再以文本格式来传输了)，它定义了如何封装http消息并在客户端与服务器之间传输。HTTP2连接上传输的每个帧都关联到一个“流”。流是一个独立的，双向的帧序列可以通过一个HTTP2的连接在服务端与客户端之间不断的交换数据。
什么时候用长连接，短连接？ 1、长连接多用于操作频繁，点对点的通讯，而且连接数不能太多情况。每个TCP连接都需要三步握手， 这需要时间，如果每个操作都是先连接，再操作的话那么处理速度会降低很多，所以每个操作完后都 不断开，次处理时直接发送数据包就OK了，不用建立TCP连接。例如：数据库的连接用长连接， 如果 用短连接频繁的通信会造成socket错误，而且频繁的socket 创建也是对资源的浪费。
2、像WEB网站的http服务一般都用短链接，因为长连接对于服务端来说会耗费一定的资源，而像WEB网 站这么频繁的成千上万甚至上亿客户端的连接用短连接会更省一些资源，如果用长连接，而且同时有成 千上万的用户，如果每个用户都占用一个连接的话，那可想而知吧。所以并发量大，但每个用户无需频繁操作情况下需用短连接好。
4. k8s中gRPC负载均衡失效 Kubernetes 的默认负载平衡通常不能与 gRPC 一起使用，在不使用 LoadBalance service 的情况下，因为 HTTP/2 链接复用特性，导致客户端的所有请求都发往同一个 Pod，导致负载不均衡。
原因可见gRPC Load Balancing on Kubernetes without Tears
首先，让我们了解为什么我们需要为 gRPC 做一些特别的事情。
gRPC 是应用程序开发人员越来越普遍的选择。与 JSON-over-HTTP 等替代协议相比，gRPC 可以提供一些显着的好处，包括显着降低（反）序列化成本、自动类型检查、形式化 API 和更少的 TCP 管理开销。
但是，gRPC 也打破了标准的连接级负载平衡，包括 Kubernetes 提供的负载平衡。这是因为 gRPC 是建立在 HTTP/2 之上的，而 HTTP/2 旨在拥有一个TCP长连接，所有请求都通过该连接进行多路复用——这意味着多个请求可以在任何时间点在同一个连接上处于活动状态。通常，这很好，因为它减少了连接管理的开销。但是，这也意味着（如您所想）连接级别的平衡不是很有用。一旦建立连接，就无需再进行平衡了。所有请求都将固定到单个目标 pod，如下所示： 那么为什么对于HTTP/1.1没有影响呢？ HTTP/1.1 也有长连接的概念，之所以在 HTTP/1.1中没有出现这个问题，是因为 HTTP/1.1 有几个特性自然会导致 TCP 连接循环。正因为如此，连接级别的平衡“足够好”，对于大多数 HTTP/1.1 应用程序，我们不需要做更多的事情。
要了解原因，让我们更深入地了解 HTTP/1.1。与 HTTP/2 相比，HTTP/1.1 不能多路复用请求。每个 TCP 连接一次只能激活一个 HTTP 请求。客户端发出请求，例如GET /foo，然后等待服务器响应。当请求-响应周期发生时，不能在该连接上发出其他请求。
通常，我们希望大量请求并行发生。因此，为了有并发的 HTTP/1.1 请求，我们需要建立多个 HTTP/1.1 连接，并在所有这些连接上发出我们的请求。此外，长期 HTTP/1.1 连接通常会在一段时间后过期，并被客户端（或服务器）断开。这两个因素结合在一起意味着 HTTP/1.1 请求通常会在多个 TCP 连接之间循环，因此连接级别的平衡是有效的。
所以我们怎样实现gRPC的负载均衡(load balance)呢？ 现在回到 gRPC。由于我们无法在连接层面进行均衡，所以为了做 gRPC 负载均衡，我们需要从连接均衡转向request均衡。换句话说，我们需要为每个目标打开一个 HTTP/2 连接，并在这些连接之间平衡request，如下所示： 在网络方面，这意味着我们需要在 L5/L7 而不是 L3/L4 做出决策，即我们需要了解通过 TCP 连接发送的协议。
我们如何做到这一点？有几个选择。首先，我们的应用程序代码可以手动维护自己的目标负载平衡池，我们可以配置我们的 gRPC 客户端以使用这个负载平衡池。这种方法为我们提供了最大的控制权，但它在 Kubernetes 等环境中可能非常复杂，在 Kubernetes 重新调度 Pod 时，池会随着时间而变化。我们的应用程序必须观察 Kubernetes API 并与 Pod 保持同步。
或者，使用如下两种方法：
代理负载平衡 在代理负载均衡中，客户端将rpc发送给LB (load Balancer)代理。LB将RPC调用分发到一个可用的后端服务器，该后端服务器实现为调用提供服务的实际逻辑。LB跟踪每个后端的负载，并实现公平分配负载的算法。客户端本身并不知道后台服务器。客户端是不可信的。这种体系结构通常用于面向用户的服务，其中来自开放互联网的客户端可以连接到服务器。
客户端负载均衡 在客户端负载平衡中，客户端知道许多后端服务器，并为每个RPC选择一个后端服务器。如果客户端希望实现基于服务器负载报告的负载均衡算法。对于简单的部署，客户机可以在可用的服务器之间轮询请求。
我们考虑使用 gRPC client LB 配合 Headless Service
使用gRPC client LB 配合 Headless Service在 Kubernetes 上实现 gRPC 负载平衡 ···· 未完待续····</content></entry><entry><title>高危端口及解决方案</title><url>/post/port/</url><categories/><tags><tag>Port</tag></tags><content type="html"> 135端口 端口介绍 在 Windows 默认的五个典型开放端口中，135 用途最为复杂，也最容易引起外部攻击。主要用于使用RPC（远程过程调用）协议并提供DCOM（分布式组件对象模型）服务。
通过RPC可以保证在一台计算机上运行的程序可以顺利地执行远程计算机上的代码：具体来说，会向对方电脑的 135 端口询问可以使用哪个端口进行通信。这样，对方的电脑就会告知可以使用的端口号。使用DCOM可以通过网络直接进行通信，能够包括HTTP协议在内的多种网络传输。
端口漏洞 Windows 2000和Windows XP⽤户曾中的“冲击波”病毒就是利⽤RPC漏洞进行攻击。RPC本⾝在处理通过TCP/IP的消息交换部分有⼀个漏洞，该漏洞是由于错误地处理格式不正确的消息造成的。该漏洞会影响到RPC与DCOM之间的⼀个接⼝，该接⼝侦听的端⼝就是135。
操作建议 为了避免“冲击波”病毒的攻击，建议关闭该端⼝。
关闭方法 单击 “开始”-“运行”，输入 “dcomcnfg”，单击 “确定”，打开组件服务。 在弹出的 “组件服务” 对话框中，选择 “计算机” 选项。 在 “计算机” 选项右边，右键单击 “我的电脑”，选择 “属性”。 在出现的 “我的电脑属性” 对话框 “默认属性” 选项卡中，去掉 “在此计算机上启用分布式 COM” 前的勾。 选择 “默认协议” 选项卡，选中 “面向连接的 TCP/IP”，单击 “移除” 按钮。 单击 “确定” 按钮，设置完成，重新启动后即可关闭 135 端口。 开启方法 单击 “开始”-“运行”，输入 “dcomcnfg”，单击 “确定”，打开组件服务。 在弹出的 “组件服务” 对话框中，选择 “计算机” 选项。 在 “计算机” 选项右边，右键单击 “我的电脑”，选择 “属性”。 在出现的 “我的电脑属性” 对话框 “默认属性” 选项卡中，选中 “在此计算机上启用分布式 COM” 前的勾。 选择 “默认协议” 选项卡，单击“添加”按钮，选中 “面向连接的 TCP/IP”。 单击 “确定” 按钮，设置完成，重新启动后即可打开 135 端口。 139端口 端口介绍 139端口用于NBT协议（即Net Bios Over TCP/IP），其属于SMB（Server Message Block）Windows协议族。NBT使用137（UDP）、138（UDP）和139（TCP）来实现基于TCP/IP的NETBIOS网际互联。而139端口的作用就是获得NETBIOS/SMB服务（即NetBIOS File and Print Sharing协议），这个协议被用于Windows文件和打印机共享。
具体来说，SMB协议根据 DNS 服务器中的名字列表信息，寻找需要通信的对象。如果顺利地得到对象的 IP 地址，就可以访问共享资源 。Windows 2000 以前版本的 Windows 使用 NetBIOS 协议解决各计算机名的问题。通过向 WINS 服务器发送通信对象的 NetBIOS 名，取得 IP 地址。
在 SMB 通信中，首先要取得通信对象的 IP 地址，然后向通信对象发出开始通信的请求。如果对方充许进行通信，就会确立会话层(Session)。并使用它向对方发送用户名和密码信息，进行认证。如果认证成功，就可以访问对方的共享文件。在这些一连串的通信中使用的就是 139 端口。
端口漏洞 在默认设置下，Windows 会开放提供文件共享服务的 TCP 139 号端口。一旦文件共享服务启动，系统就会进入等待状态。而共享资源则可以利用 net 命令轻松地进行分配。尽管 C 盘如果没有管理员权限就无法共享，但如果不经意地将 Guest 帐号设置为有效以后，攻击者就能够访问 C 盘，非常轻松地破坏硬盘。 2017年10月，由于病毒“坏兔子”来袭，国家互联网应急中心等安全机构建议用户及时关闭计算机以及网络设备上的445和139端口。
操作建议 在因特网上公开的服务器打开 139 端口是一件非常危险的事情。如果有 Guest 帐号，而且没有设置任何密码时，就能够被人通过因特网轻松地盗看文件。如果给该帐号设置了写入权限，甚至可以轻松地篡改文件。也就是说在对外部公开的服务器中不应该打开这些端口。通过因特网使用文件服务器就等同自杀行为，因此一定要关闭 139 端口。
关闭方法 打开控制面板，选择“网络和Internet”。 在弹出的 “网络和Internet” 对话框中，单击 “网络和共享中心” 按钮。 在出现的 “网络和共享中心” 对话框中，选择左侧 “更改适配器设置”。 然后选中本地连接的网络，右键“属性”。 选择Internet协议版本4（TCP/IPv4）—>属性—>高级—>WINS—>禁用TCP/IP上的NetBIOS(S)。 单击 “确定” 按钮，设置完成，重新启动后即可关闭 135 端口。 开启方法 打开控制面板，选择“网络和Internet”。 在弹出的 “网络和Internet” 对话框中，单击 “网络和共享中心” 按钮。 在出现的 “网络和共享中心” 对话框中，选择左侧 “更改适配器设置”。 然后选中本地连接的网络，右键“属性”。 选择Internet协议版本4（TCP/IPv4）—>属性—>高级—>WINS—>启用TCP/IP上的NetBIOS(S)。 单击 “确定” 按钮，设置完成，重新启动后即可打开 135 端口。 445端口 端口介绍 445 端口是一种TCP端口，该端口在windows 2000 Server或Windows Server 2003系统中发挥的作用与139 端口是完全相同的。具体地说，它可以提供局域网中文件或打印机共享服务。不过该端口是基于CIFS协议（通用因特网文件系统协议）工作的，而139 端口是基于SMB协议（服务器协议族）对外提供共享服务。同样地，攻击者与445 端口建立请求连接，也能获得指定局域网内的各种共享信息。
445 端口的作用是实现一些共享文件夹以及一些共享打印机的访问工作，只要在局域网络的范围之内就能进行轻松的访问工作。
端口漏洞 由于只要在局域网络的范围之内就能通过445 端口进行访问，所以黑客侵入的可能性很高，黑客可以通过445端口进入我们的硬盘，从而对我们的文件进行共享，或者将我们硬盘内的数据格式化，导致我们的数据丢失。 2017年10月，由于病毒“坏兔子”来袭，国家互联网应急中心等安全机构建议用户及时关闭计算机以及网络设备上的445和139端口。多家网络安全机构监测分析发现，与此前席卷多国的WannaCry、Petya勒索病毒类似，这次在集团范围内传播的“蠕虫”病毒也会以感染的设备为跳板，攻击局域网内的其他电脑，形成“一台中招，一片遭殃”的情况。
操作建议 与139 端口类似，公开服务器 445 端口是一件非常危险的事情。容易被黑客通过因特网轻松地盗看文件。如果给该帐号设置了写入权限，甚至可以轻松地篡改文件。也就是说在对外部公开的服务器中不应该打开这些端口。通过因特网使用文件服务器就等同自杀行为，因此建议关闭445 端口。
关闭方法 单击 “开始”-“运行”，输入 “regedit”，单击 “确定” 按钮，打开注册表。 找到注册表项 “HKEY_LOCAL_MACHINE\System\Controlset\Services\NetBT\Parameters”。 选择 “Parameters” 项，右键单击，选择 “新建”——“DWORD 值”。 将 DWORD 值命名为 “SMBDeviceEnabled”。 右键单击 “SMBDeviceEnabled” 值，选择 “修改”。 在出现的 “编辑 DWORD 值” 对话框中，在 “数值数据” 下，输入 “0”，单击 “确定” 按钮，完成设置。 开启方法 单击 “开始”-“运行”，输入 “regedit”，单击 “确定” 按钮，打开注册表。 找到注册表项 “HKEY_LOCAL_MACHINE\System\Controlset\Services\NetBT\Parameters”。 选择 “Parameters” 项。 在右侧右键选中删除“SMBDeviceEnabled”值。 单击 “是” 按钮，设置完成，重新启动后即可打开 135 端口。</content></entry><entry><title>详解Redis缓存穿透、击穿、雪崩原理及解决方法</title><url>/post/my-first-post/</url><categories/><tags/><content type="html"> 在实际的项目开发中，用户的数据我们一般都使用数据库进行存储，其数据是存储在磁盘上的，虽然稳定，但I/O速度很慢，当用户量很多且有并发需求时，请求数量一上来数据库就很容易崩溃。
为了解决这一问题，Redis这一内存数据库得到了广泛的应用，将其作为缓存中间件，可以将磁盘数据库中的数据缓存在Redis上，从而相当于在内存上进行了缓存，可以大大提高读写速度，提高系统性能。
然而在缓存中，由于Redis和Mysql这类磁盘数据库速度的不匹配，会出现缓存异常的问题，其中缓存穿透、缓存击穿、缓存雪崩是需要考虑并解决的问题。 缓存穿透 问题描述 Key对应的数据并不存在，每次请求访问key时，缓存中查找不到，请求都会直接访问到数据库中去，请求量超出数据库时，便会导致数据库崩溃。如一个用户id不存在，数据库与缓存都不存在该id，此时黑客便可以利用此漏洞不断访问该id，造成数据库崩溃。
解决方案 ①对空值缓存：如果一个查询数据为空（不管数据是否存在），都对该空结果进行缓存，其过期时间会设置非常短。
②设置可以访问名单：使用bitmaps类型定义一个可以访问名单，名单id作为bitmaps的偏移量，每次访问时与bitmaps中的id进行比较，如果访问id不在bitmaps中，则进行拦截，不给其访问。
③采用布隆过滤器：布隆过滤器可以判断元素是否存在集合中，他的优点是空间效率和查询时间都比一般算法快，缺点是有一定的误识别率和删除困难。
④进行实时监控：对于redis缓存中命中率急速下降时，迅速排查访问对象和访问数据，将其设置为黑名单。
缓存击穿 问题描述 key中对应数据存在，当key中对应的数据在缓存中过期，而此时又有大量请求访问该数据，缓存中过期了，请求会直接访问数据库并回设到缓存中，高并发访问数据库会导致数据库崩溃。
解决方案 ①预先设置热门数据：在redis高峰访问时期，提前设置热门数据到缓存中，或适当延长缓存中key过期时间。
②实时调整：实时监控哪些数据热门，实时调整key过期时间。
③对于热点key设置永不过期。
缓存雪崩 问题描述 key中对应数据存在，在某一时刻，缓存中大量key过期，而此时大量高并发请求访问，会直接访问后端数据库，导致数据库崩溃。 注意：缓存击穿是指一个key对应缓存数据过期，缓存雪崩是大部分key对应缓存数据过期
解决方案 ①构建多级缓存机制：nginx缓存+redis缓存+其他缓存。
②设置过期标志更新缓存：记录缓存数据是否过期，如果过期会触发另外一个线程去在后台更新实时key的缓存。
③将缓存可以时间分散：如在原有缓存时间基础上增加一个随机值，这个值可以在1-5分钟随机，这样过期时间重复率就会降低，防止大量key同时过期。
④使用锁或队列机制：使用锁或队列保证不会有大量线程一次性对数据库进行读写，从而避免大量并发请求访问数据库，该方法不适用于高并发情况。</content></entry><entry><title>如何用Hugo搭建自己的个人博客(GithubPages + Aliyun)</title><url>/post/hugo-blog-make/</url><categories/><tags><tag>Hugo</tag><tag>github</tag><tag>blog</tag></tags><content type="html"> 个人博客有许多开源的框架，基于Go语言的Hugo框架有着快速方便的特点，且支持Markdown语法，利用它来构建博客可以大大提高我们的效率。下面一起来看看怎么基于它构建出我们理想的个人博客，并将它托管至GitHub上吧！
1. 安装Hugo 野生菌使用的是Windows系统，所以安装过程中会基于Windows进行讲解，有关其他操作系统的安装方法可以参考官方文档
首先去官网下载hugo框架，hugo官网
下载完成后检查是否安装成功，输入:hugo version，若出现版本信息则表示安装成功。 2. 新建站点 这时候我们已经安装好了hugo框架，接下来进入我们想要放置网站文件的文件夹中，输入hugo new site blog， 再进入新创建的路径下cd blog
野生菌恭喜你！已经创建了自己的博客啦~
3. 为博客设置主题 Hugo 中你可以自己构建博客的主题或者使用网上已经有的一些主题。前人栽树，后人乘凉，在hugo主题官网
中找一个自己喜欢的主题吧！ 然后进入主题所在的目录：cd themes 克隆主题：git clone https://themes.gohugo.io/themes/hugo-theme-next/,这里野生菌的主题是NexT
然后在themes文件夹下会出现如下目录： 之后按照主题对应的要求，配置相关的文件。 配置完成后，输入hugo server -D，在浏览器中输入http://localhost:1313，就可以在本地可视化你的博客啦！
4. 使用Github进行托管 这时候虽然博客雏形已经有了，但只能是在本地查看，为了让别人也能通过网址访问，我们可以使用GitHub来对我们的博客进行免费托管。
在 GitHub 上创建一个仓库，不过仓库名有特殊要求。如果是个人账号，比如野生菌的 GitHub ID 是 yeplain，则仓库名是：yeplain.github.io 之后在你的 Hugo 网站目录下键入命令hugo -v生成网站的相应文件，存储在 public 目录下。
进入public目录下，并按照正常的git命令操作： cd public git init git add . git commit -m "first commit" git remote add origin https://github.com/yeplain/yeplain.github.io.git #推送到远程git git push origin master
之后如果我们写了新的博客 在blog文件夹中执行hugo 然后cd public 依次执行 git init git add . git commit -m "new commit" git push -u origin master 就行啦~~~</content></entry><entry><title>Markdown语法手册</title><url>/post/markdown-syntax/</url><categories><category>themes</category><category>syntax</category></categories><tags><tag>markdown</tag><tag>css</tag><tag>html</tag></tags><content type="html"> 本文提供了一个可以在 Hugo 内容文件中使用的基本Markdown语法示例，还展示了基本 HTML 元素在 Hugo 主题中是否使用 CSS 装饰。
标题 下面的 HTML 代码&lt;h1>—&lt;h6> 元素表示六个级别的节标题。 &lt;h1>是最高的节级别，&lt;h6>是最低的节级别。
H1 H2 H3 H4 H5 H6 段落 生活是什么？生活是柴米油盐的平淡；是行色匆匆早出晚归的奔波；生活是错的时间遇到对的人的遗憾；是爱的付出与回报；生活是看不同的风景，遇到不同的人；是行至水穷尽，坐看云起时的峰回路转；生活是灵魂经历伤痛后的微笑怒放；是挫折坎坷被晾晒后的坚强；生活是酸甜苦辣被岁月沉淀后的馨香；是经历风霜雪雨洗礼后的懂得；生活是走遍千山万水后，回眸一笑的洒脱。
有些事，猝不及防，不管你在不在乎；有些人，并非所想，不管你明不明白；有些路，必须得走，不管你愿不愿意。不怕事，不惹事，不避事，做好自己，用真心面对一切；少埋怨，少指责，少发火，学会沉静，用微笑考量一切；多体察，多包容，多思索，尽心尽力，虽缺憾但无悔。像蒲公英一样美丽，虽轻盈，但并不卑微，它有自己的生命，也有自己的世界！
引用 blockquote 元素表示从另一个来源引用的内容，可选的引用必须在 footer 或 cite元素内，也可选的内嵌更改，如注释和缩写。
引用没有归属 读懂自我，带着简单的心情，看复杂的人生，走坎坷的路！
注意： 可以在块引用中使用 Markdown 语法。
带归属的引用 不要通过分享记忆来交流，通过交流来分享记忆。
— 罗布·派克1
表格 表不是Markdown核心规范的一部分，但是Hugo支持开箱即用。
Name Age Bob 27 Alice 23 表格内使用Markdown语法 Italics Bold Code italics bold code 图像 ![图像描述](图像地址) 示例 常规用法 SVG图像 Google Chrome
Firefox Browser
小图标 点击图像可以打开图像浏览器，快试试吧。
代码块 带有引号的代码块 &lt;!doctype html> &lt;html lang="en"> &lt;head> &lt;meta charset="utf-8"> &lt;title>Example HTML5 Document&lt;/title> &lt;/head> &lt;body> &lt;p>Test&lt;/p> &lt;/body> &lt;/html> 用四个空格缩进的代码块 &lt;!doctype html>
&lt;html lang="en">
&lt;head>
&lt;meta charset="utf-8">
&lt;title>Example HTML5 Document&lt;/title>
&lt;/head>
&lt;body>
&lt;p>Test&lt;/p>
&lt;/body>
&lt;/html>
代码块引用Hugo的内部高亮短代码 &lt;!doctype html> &lt;html lang="en"> &lt;head> &lt;meta charset="utf-8"> &lt;title>Example HTML5 Document&lt;/title> &lt;/head> &lt;body> &lt;p>Test&lt;/p> &lt;/body> &lt;/html> 列表类型 有序列表 First item Second item Third item 无序列表 List item Another item And another item 嵌套列表 Fruit Apple Orange Banana Dairy Milk Cheese 其他元素 — abbr, sub, sup, kbd, mark GIF 是位图图像格式。
H2O
Xn + Yn = Zn
按 CTRL+ALT+Delete 组合键结束会话。
大多数蝾螈在夜间活动，捕食昆虫、蠕虫和其他小动物。
以上引文摘自Rob Pike在2015年11月18日 Gopherfest 上的演讲
。&#160;&#8617;&#xfe0e;</content></entry><entry><title>富文本内容测试</title><url>/post/rich-content/</url><categories/><tags><tag>shortcodes</tag><tag>privacy</tag></tags><content type="html"> Hugo 上有几个内置短码
，用于丰富内容，以及隐私配置
还有一组简单的短代码，支持各种社交媒体嵌入的静态和非 JS 版本。
YouTube 增强隐私短码 {{/&lt; youtube ZJthWmvUzzc >/}}
Twitter 短码 {{/&lt; twitter_simple 1085870671291310081 >/}}
Vimeo 短码 {{/&lt; vimeo_simple 48912912 >/}}
哔哩哔哩短码</content></entry><entry><title>图像占位符显示</title><url>/post/placeholder-text/</url><categories/><tags><tag>markdown</tag><tag>text</tag></tags><content type="html"> 范德格拉夫原理（Van de Graaf Canon）重构了曾经用于书籍设计中将页面划分为舒适比例的方法。这一原理也被称为“秘密原理”，用于许多中世纪的手稿和古板书中。在范德格拉夫原理中，文本区域和页面的长款具有相同的比例，并且文本区域的高度等于页面宽度，通过划分页面得到九分之一的订口边距和九分之二的切口边距，以及与页面长宽相同的比例的文本区域。
Vagus 示例 The Van de Graaf Canon
总结 当然设计中的黄金比例是为人所熟知的，黄金分割的公式为a:b=b:(a+b)。这是指较小的两个矩形与较大的两个矩形以相同的组合方式相关联。黄金分割比例为1:1.618。</content></entry><entry><title>数据公式设置显示</title><url>/post/math-typesetting/</url><categories/><tags/><content type="html"> Hugo 项目中的数学表示法可以通过使用第三方 JavaScript 库来实现。
在这个例子中，我们将使用 MathJax
创建一个文件 /content/en[zh-CN]/math.md
可以全局启用MathJax，请在项目配置中将参数math设置为true
或是在每页基础上启用MathJax，在内容文件中包括参数math: true
注意： 使用支持的TeX功能
的联机参考资料
例子 重复的分数 $$ \frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} \equiv 1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}} {1+\frac{e^{-8\pi}} {1+\cdots} } } } $$
总和记号 $$ \left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right) $$
几何级数之和 我把接下来的两个例子分成了几行，这样它在手机上表现得更好。这就是为什么它们包含 \displaystyle。
$$ \displaystyle\sum_{i=1}^{k+1}i $$
$$ \displaystyle= \left(\sum_{i=1}^{k}i\right) +(k+1) $$
$$ \displaystyle= \frac{k(k+1)}{2}+k+1 $$
$$ \displaystyle= \frac{k(k+1)+2(k+1)}{2} $$
$$ \displaystyle= \frac{(k+1)(k+2)}{2} $$
$$ \displaystyle= \frac{(k+1)((k+1)+1)}{2} $$
乘记号 $$ \displaystyle 1 + \frac{q^2}{(1-q)}+\frac{q^6}{(1-q)(1-q^2)}+\cdots = \displaystyle \prod_{j=0}^{\infty}\frac{1}{(1-q^{5j+2})(1-q^{5j+3})}, \displaystyle\text{ for }\lvert q\rvert &lt; 1. $$
随文数式 这是一些线性数学: $$ k_{n+1} = n^2 + k_n^2 - k_{n-1} $$ ， 然后是更多的文本。
希腊字母 $$ \Gamma\ \Delta\ \Theta\ \Lambda\ \Xi\ \Pi\ \Sigma\ \Upsilon\ \Phi\ \Psi\ \Omega \alpha\ \beta\ \gamma\ \delta\ \epsilon\ \zeta\ \eta\ \theta\ \iota\ \kappa\ \lambda\ \mu\ \nu\ \xi \ \omicron\ \pi\ \rho\ \sigma\ \tau\ \upsilon\ \phi\ \chi\ \psi\ \omega\ \varepsilon\ \vartheta\ \varpi\ \varrho\ \varsigma\ \varphi $$
箭头 $$ \gets\ \to\ \leftarrow\ \rightarrow\ \uparrow\ \Uparrow\ \downarrow\ \Downarrow\ \updownarrow\ \Updownarrow $$
$$ \Leftarrow\ \Rightarrow\ \leftrightarrow\ \Leftrightarrow\ \mapsto\ \hookleftarrow \leftharpoonup\ \leftharpoondown\ \rightleftharpoons\ \longleftarrow\ \Longleftarrow\ \longrightarrow $$
$$ \Longrightarrow\ \longleftrightarrow\ \Longleftrightarrow\ \longmapsto\ \hookrightarrow\ \rightharpoonup $$
$$ \rightharpoondown\ \leadsto\ \nearrow\ \searrow\ \swarrow\ \nwarrow $$
符号 $$ \surd\ \barwedge\ \veebar\ \odot\ \oplus\ \otimes\ \oslash\ \circledcirc\ \boxdot\ \bigtriangleup $$
$$ \bigtriangledown\ \dagger\ \diamond\ \star\ \triangleleft\ \triangleright\ \angle\ \infty\ \prime\ \triangle $$
微积分学 $$ \int u \frac{dv}{dx},dx=uv-\int \frac{du}{dx}v,dx $$
$$ f(x) = \int_{-\infty}^\infty \hat f(\xi),e^{2 \pi i \xi x} $$
$$ \oint \vec{F} \cdot d\vec{s}=0 $$
洛伦茨方程 $$ \begin{aligned} \dot{x} &amp; = \sigma(y-x) \ \dot{y} &amp; = \rho x - y - xz \ \dot{z} &amp; = -\beta z + xy \end{aligned} $$
交叉乘积 这在KaTeX中是可行的，但在这种环境中馏分的分离不是很好。
$$ \mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix} \mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \ \frac{\partial X}{\partial u} &amp; \frac{\partial Y}{\partial u} &amp; 0 \ \frac{\partial X}{\partial v} &amp; \frac{\partial Y}{\partial v} &amp; 0 \end{vmatrix} $$
这里有一个解决方案:使用“mfrac”类(在MathJax情况下没有区别)的额外类使分数更小:
$$ \mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix} \mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \ \frac{\partial X}{\partial u} &amp; \frac{\partial Y}{\partial u} &amp; 0 \ \frac{\partial X}{\partial v} &amp; \frac{\partial Y}{\partial v} &amp; 0 \end{vmatrix} $$
强调 $$ \hat{x}\ \vec{x}\ \ddot{x} $$
有弹性的括号 $$ \left(\frac{x^2}{y^3}\right) $$
评估范围 $$ \left.\frac{x^3}{3}\right|_0^1 $$
诊断标准 $$ f(n) = \begin{cases} \frac{n}{2}, &amp; \text{if } n\text{ is even} \ 3n+1, &amp; \text{if } n\text{ is odd} \end{cases} $$
麦克斯韦方程组 $$ \begin{aligned} \nabla \times \vec{\mathbf{B}} -, \frac1c, \frac{\partial\vec{\mathbf{E}}}{\partial t} &amp; = \frac{4\pi}{c}\vec{\mathbf{j}} \ \nabla \cdot \vec{\mathbf{E}} &amp; = 4 \pi \rho \ \nabla \times \vec{\mathbf{E}}, +, \frac1c, \frac{\partial\vec{\mathbf{B}}}{\partial t} &amp; = \vec{\mathbf{0}} \ \nabla \cdot \vec{\mathbf{B}} &amp; = 0 \end{aligned} $$
这些方程式很狭窄。我们可以使用(例如)添加垂直间距 [1em] 在每个换行符(\)之后。正如你在这里看到的：
$$ \begin{aligned} \nabla \times \vec{\mathbf{B}} -, \frac1c, \frac{\partial\vec{\mathbf{E}}}{\partial t} &amp; = \frac{4\pi}{c}\vec{\mathbf{j}} \[1em] \nabla \cdot \vec{\mathbf{E}} &amp; = 4 \pi \rho \[0.5em] \nabla \times \vec{\mathbf{E}}, +, \frac1c, \frac{\partial\vec{\mathbf{B}}}{\partial t} &amp; = \vec{\mathbf{0}} \[1em] \nabla \cdot \vec{\mathbf{B}} &amp; = 0 \end{aligned} $$
统计学 固定词组：
$$ \frac{n!}{k!(n-k)!} = {^n}C_k {n \choose k} $$
分数在分数 $$ \frac{\frac{1}{x}+\frac{1}{y}}{y-z} $$
ｎ次方根 $$ \sqrt[n]{1+x+x^2+x^3+\ldots} $$
矩阵 $$ \begin{pmatrix} a_{11} &amp; a_{12} &amp; a_{13}\ a_{21} &amp; a_{22} &amp; a_{23}\ a_{31} &amp; a_{32} &amp; a_{33} \end{pmatrix} \begin{bmatrix} 0 &amp; \cdots &amp; 0 \ \vdots &amp; \ddots &amp; \vdots \ 0 &amp; \cdots &amp; 0 \end{bmatrix} $$
标点符号 $$ f(x) = \sqrt{1+x} \quad (x \ge -1) f(x) \sim x^2 \quad (x\to\infty) $$
现在用标点符号:
$$ f(x) = \sqrt{1+x}, \quad x \ge -1 f(x) \sim x^2, \quad x\to\infty $$</content></entry><entry><title>支持Emoji表情符号</title><url>/post/emoji-support/</url><categories/><tags><tag>emoji</tag></tags><content type="html"> Emoji 表情符号可以通过多种方式在 Hugo 项目中启用。
使用 Emoji 表情符号可以在模板中可以直接调用 emojify
函数或是通过 内联短代码
来实现。
如果要全局启用 Emoji 表情符号，请在网站配置
文件中将 enableEmoji 参数值设置为 true，然后可以直接在内容文件中输入表情符号简写代码，参考如下：
猴子表情 🙈 :see_no_evil:
🙉 :hear_no_evil:
🙊 :speak_no_evil:
数字符号 1️⃣ :one:
2️⃣ :two:
3️⃣ :three:
建筑物 🏡 :house_with_garden:
🏣 :post_office:
🏥 :hospital:
更多的 Emoji 表情符号代码可参考Emoji 配对目录
。
注意: 以上步骤在 Hugo 中启用 Unicode 标准表情符号和序列，但是这些符号的呈现取决于浏览器和平台，要设置表情符号的样式，您可以使用第三方表情符号字体或字体。例如：
.emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }</content></entry><entry><title>关于我</title><url>/about.html</url><categories/><tags/><content type="html"> Hugo是用Go编写的一个开放源代码静态站点生成器，可在Apache许可证2.0
下使用。 Hugo支持TOML, YAML和JSON数据文件类型，Markdown和HTML内容文件，并使用短代码添加丰富的内容。其他值得注意的功能包括分类法、多语言模式、图像处理、自定义输出格式、HTML/CSS/JS缩小和对Sass SCSS工作流的支持。
Hugo使用了多种开源项目，包括:
https://github.com/yuin/goldmark
https://github.com/alecthomas/chroma
https://github.com/muesli/smartcrop
https://github.com/spf13/cobra
https://github.com/spf13/viper
Hugo是博客、企业网站、创意作品集、在线杂志、单页应用程序甚至是数千页的网站的理想选择。
Hugo适合那些想要手工编写自己的网站代码，而不用担心设置复杂的运行时、依赖关系和数据库的人。
使用Hugo建立的网站非常快速、安全，可以部署在任何地方，包括AWS、GitHub Pages、Heroku、Netlify和任何其他托管提供商。
更多信息请访问GitHub
.</content></entry></search>